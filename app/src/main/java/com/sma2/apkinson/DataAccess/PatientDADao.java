package com.sma2.apkinson.DataAccess;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT_DA".
*/
public class PatientDADao extends AbstractDao<PatientDA, Long> {

    public static final String TABLENAME = "PATIENT_DA";

    /**
     * Properties of entity PatientDA.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property GovtId = new Property(1, String.class, "govtId", false, "GOVT_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Birthday = new Property(3, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Hand = new Property(5, int.class, "hand", false, "HAND");
        public final static Property Smoker = new Property(6, boolean.class, "smoker", false, "SMOKER");
        public final static Property Educational_level = new Property(7, int.class, "educational_level", false, "EDUCATIONAL_LEVEL");
        public final static Property Year_diag = new Property(8, int.class, "year_diag", false, "YEAR_DIAG");
        public final static Property Other_disorder = new Property(9, String.class, "other_disorder", false, "OTHER_DISORDER");
        public final static Property Weight = new Property(10, float.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(11, int.class, "height", false, "HEIGHT");
        public final static Property SessionCount = new Property(12, int.class, "sessionCount", false, "SESSION_COUNT");
    }


    public PatientDADao(DaoConfig config) {
        super(config);
    }
    
    public PatientDADao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT_DA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"GOVT_ID\" TEXT," + // 1: govtId
                "\"USERNAME\" TEXT," + // 2: username
                "\"BIRTHDAY\" INTEGER," + // 3: birthday
                "\"GENDER\" TEXT," + // 4: gender
                "\"HAND\" INTEGER NOT NULL ," + // 5: hand
                "\"SMOKER\" INTEGER NOT NULL ," + // 6: smoker
                "\"EDUCATIONAL_LEVEL\" INTEGER NOT NULL ," + // 7: educational_level
                "\"YEAR_DIAG\" INTEGER NOT NULL ," + // 8: year_diag
                "\"OTHER_DISORDER\" TEXT," + // 9: other_disorder
                "\"WEIGHT\" REAL NOT NULL ," + // 10: weight
                "\"HEIGHT\" INTEGER NOT NULL ," + // 11: height
                "\"SESSION_COUNT\" INTEGER NOT NULL );"); // 12: sessionCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT_DA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatientDA entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String govtId = entity.getGovtId();
        if (govtId != null) {
            stmt.bindString(2, govtId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(4, birthday.getTime());
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
        stmt.bindLong(6, entity.getHand());
        stmt.bindLong(7, entity.getSmoker() ? 1L: 0L);
        stmt.bindLong(8, entity.getEducational_level());
        stmt.bindLong(9, entity.getYear_diag());
 
        String other_disorder = entity.getOther_disorder();
        if (other_disorder != null) {
            stmt.bindString(10, other_disorder);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindLong(12, entity.getHeight());
        stmt.bindLong(13, entity.getSessionCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatientDA entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String govtId = entity.getGovtId();
        if (govtId != null) {
            stmt.bindString(2, govtId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(4, birthday.getTime());
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
        stmt.bindLong(6, entity.getHand());
        stmt.bindLong(7, entity.getSmoker() ? 1L: 0L);
        stmt.bindLong(8, entity.getEducational_level());
        stmt.bindLong(9, entity.getYear_diag());
 
        String other_disorder = entity.getOther_disorder();
        if (other_disorder != null) {
            stmt.bindString(10, other_disorder);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindLong(12, entity.getHeight());
        stmt.bindLong(13, entity.getSessionCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatientDA readEntity(Cursor cursor, int offset) {
        PatientDA entity = new PatientDA( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // govtId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.getInt(offset + 5), // hand
            cursor.getShort(offset + 6) != 0, // smoker
            cursor.getInt(offset + 7), // educational_level
            cursor.getInt(offset + 8), // year_diag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // other_disorder
            cursor.getFloat(offset + 10), // weight
            cursor.getInt(offset + 11), // height
            cursor.getInt(offset + 12) // sessionCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatientDA entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGovtId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHand(cursor.getInt(offset + 5));
        entity.setSmoker(cursor.getShort(offset + 6) != 0);
        entity.setEducational_level(cursor.getInt(offset + 7));
        entity.setYear_diag(cursor.getInt(offset + 8));
        entity.setOther_disorder(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeight(cursor.getFloat(offset + 10));
        entity.setHeight(cursor.getInt(offset + 11));
        entity.setSessionCount(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatientDA entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatientDA entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatientDA entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
